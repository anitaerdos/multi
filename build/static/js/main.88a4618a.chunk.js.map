{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInputAndButton","textInput","React","createRef","props","onClick","current","state","value","setState","className","ref","onEnter","buttonContent","Component","TextInput","focus","attrs","autofocus","autoFocus","onKeyDown","keyCode","onChange","target","onBlur","onFocus","placeholder","Login","email","password","displayName","register","src","width","displayNameChanger","href","preventDefault","sendPacket","staySignedIn","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","loggedIn","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.88a4618a.chunk.js","sourcesContent":["import { IncomingPacket, OutgoingPacket, InboxDto, MessageDto } from './chat.d';\r\nimport { EventProducer } from './EventProducer';\r\n\r\n\r\ninterface ProxyEventMap\r\n{\r\n    \"login\": () => void;\r\n    \"message\": ( channelId: string, message: MessageDto ) => void;\r\n    \"conversation\": ( channelId: string ) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\r\n        this.ws.addEventListener( \"message\", e =>\r\n        {\r\n            let p = <IncomingPacket>JSON.parse( e.data );\r\n            switch ( p.type )\r\n            {\r\n                case \"error\":\r\n                    alert( p.message );\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch( \"login\" );\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\r\n                    this.dispatch( \"message\", cid, p.message );\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push( p.conversation );\r\n                    this.dispatch( \"conversation\", p.conversation.channelId );\r\n                    break;\r\n            }\r\n        } );\r\n    }\r\n    public sendPacket( packet: OutgoingPacket )\r\n    {\r\n        this.ws.send( JSON.stringify( packet ) );\r\n        //console.log(packet);\r\n    }\r\n}\r\nexport var proxy = new Proxy();\r\n","export class EventProducer<M>\r\n{\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>( type: K, listener: M[K], obj?: Object )\r\n    {\r\n        this.listeners.push( { type, listener, obj } );\r\n    }\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[K] )\r\n    {\r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\r\n    }\r\n    protected dispatch<K extends keyof M>( type: K, ...args )\r\n    {\r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\r\n        listener.listener.call( listener.obj, ...args );\r\n    }\r\n    removeAllEventListener<K extends keyof M>( obj: Object )\r\n    {\r\n        if ( !obj )\r\n            throw new Error( \"Must specify object\" );\r\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport './TextInput.css';\r\n\r\nexport interface TextInputOptions\r\n{\r\n    value?: string;\r\n    onChange?: ( value: string ) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\n    buttonContent?: string;\r\n    onClick?: ( text: string ) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n            this.textInput.current?.setState( { value: \"\" } );\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput { ...this.props } ref={ this.textInput } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.props.buttonContent }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n    render()\r\n    {\r\n        let attrs = {} as any;\r\n        if ( this.props.autofocus )\r\n            attrs.autoFocus = true;\r\n        if ( this.props.onEnter )\r\n            attrs.onKeyDown = e =>\r\n            {\r\n                if ( e.keyCode === 13 )\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input {...attrs} type={ this.props.type ?? \"text\" } value={ this.state.value }\r\n                    onChange={ e =>\r\n                    {\r\n                        this.setState( { value: e.target.value } );\r\n                        this.props.onChange?.( e.target.value );\r\n                    } }\r\n                    onBlur={ () => this.setState( { focus: false } ) }\r\n                    onFocus={ () => this.setState( { focus: true } ) } />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n                    { this.props.placeholder }\r\n                </label>\r\n            </div> ); \r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { proxy } from './Proxy';\r\nimport { TextInput } from './TextInput';\r\n\r\nexport class Login extends Component\r\n{\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false};\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName }\r\n                    onChange={ e => this.setState( { displayName: e } )} onEnter={ () => this.onClick() }/> }\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={ this.state.email} onChange={  e => this.displayNameChanger(e) } onEnter={ () => this.onClick() } autofocus={ true }/>\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={ this.state.password } onChange={ e => this.setState( { password: e } ) } onEnter={ () => this.onClick() }/>\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                     {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                    <a href=\"\" onClick={ e => { e.preventDefault(); this.setState( { register: !this.state.register } ); } }>\r\n                        { this.state.register ? \"Login\" : \"Register\" }\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div> );\r\n    }\r\n    displayNameChanger(e: string) {\r\n        if (e === \"DP7RWY\"){\r\n            this.setState({displayName: \"Anita\"}) \r\n        }\r\n        this.setState( { email: e } )\r\n    }\r\n    onClick(){\r\n        if ( this.state.register )\r\n        {\r\n            proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false} );\r\n            this.setState({register: false});\r\n        }\r\n        else\r\n        {\r\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false } );            \r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto } from \"./chat.d\";\r\nimport { proxy } from \"./Proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n        conversation: ConversationDto,\r\n        selected: boolean,\r\n        onSelect: () => void\r\n    }>\r\n    {\r\n    render()\r\n    {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\r\n        return (\r\n            <div className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\r\n                onClick={ () => this.props.onSelect() }>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{ this.props.conversation.name }</span>\r\n                    <span className=\"time\">\r\n                        { lastMessage && new Date( lastMessage.timeStamp ).toLocaleDateString() }\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{ lastMessage?.content }</span>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n        if ( cid === this.props.conversation.channelId )\r\n        this.forceUpdate();\r\n        }, this );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { InboxDto, ConversationDto } from \"./chat.d\";\r\nimport { TextInputAndButton } from \"./TextInput\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: ( c: ConversationDto ) => void\r\n}>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={ text => this.sendContactRequest( text ) } />\r\n                <div className=\"conversations\">\r\n                    { this.props.inbox.conversations.map( x =>\r\n                        <ConversationCard\r\n                            key={ x.channelId }\r\n                            conversation={ x }\r\n                            selected={ x === this.props.selectedConversation }\r\n                            onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest( email: string )\r\n    {\r\n        proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\r\n        return true;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n    \r\n    \r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat.d\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{ this.props.message.content }</span>\r\n                    <span className=\"time\">\r\n                        { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto } from \"./chat.d\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { TextInputAndButton } from \"./TextInput\";\r\nimport { MessageCard } from \"./MessageCard\";\r\n\r\n//export class RightPane extends Component<{ conversation?: ConversationDto }>\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    onSend( text: string )\r\n    {\r\n        proxy.sendPacket( { type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"D: \"+text } );\r\n        return true;\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                <div className=\"conversation-header row\">\r\n                    <button type=\"button\" className=\"only-narrow\"\r\n                        onClick={ () => this.props.onBack() }>Back</button>\r\n                    <p>{ this.props.conversation?.name }</p>\r\n                </div>\r\n                { this.props.conversation &&\r\n                    <>\r\n                        <div className=\"messages\">\r\n                            { this.props.conversation?.lastMessages.map( x =>\r\n                                <MessageCard key={ x.id } message={ x }\r\n                                    own={ x.senderId === proxy.inbox?.user.id } /> ) }\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={ x => this.onSend( x ) } />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n        if ( cid === this.props.conversation?.channelId )\r\n            this.forceUpdate();\r\n        }, this );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto } from './chat.d';\r\nimport { proxy } from './Proxy';\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { RightPane } from \"./RightPane\";\r\n\r\nexport class Main extends Component\r\n{\r\n    state = { selectedConversation: undefined as ( ConversationDto | undefined ) };\r\n    render()\r\n    {\r\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n        return (\r\n            <div className={ className }>\r\n                <LeftPane\r\n                    inbox={ proxy.inbox! }\r\n                    selectedConversation={ this.state.selectedConversation }\r\n                    onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n                <RightPane conversation={ this.state.selectedConversation }\r\n                    onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n            </div>\r\n        );\r\n    }\r\n}","import './App.css';\nimport React, { Component } from 'react';\nimport { Login } from './Login'\nimport { Main } from './Main'\nimport { proxy } from './Proxy';\n\nexport default class App extends Component\n{\n  state = {loggedIn: false}\n  render()\n  {\n    return (\n      <div className=\"app\">\n        {this.state.loggedIn ? <Main />:<Login />}\n      </div>\n    );\n  }\n  componentDidMount(){\n    proxy.addEventListener(\"login\", () =>{\n      this.setState({loggedIn: true});\n    }, this);\n  }\n\n  componentWillUnmount(){\n    proxy.removeAllEventListener(this);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}